/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package genetic.algorithm;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 *
 * @author Ari
 */
public class Panel extends javax.swing.JPanel {

    int x, y, width, height;
    int fitnessDisplay = 1;
    ArrayList<Double> coResults = new ArrayList();
    ArrayList<Double> mResults = new ArrayList();
    ArrayList<Double> f4Results = new ArrayList();
    Population co;
    Population m;
    Population f4;
    ArrayList<String> coPopList = new ArrayList();
    ArrayList<String> f4PopList = new ArrayList();
    ArrayList<String> mPopList = new ArrayList();

    public Panel() {
        initComponents();

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        setConstants();
        g.setFont(new Font("TimesRoman", Font.BOLD, 15));
        g.setColor(Color.gray);
        g.drawRect(x, y, width, height);
        drawLines(g);
        g.setColor(Color.green);
        displayData(g);

    }

    public void displayData(Graphics g) {

        int row = y - 25;
        int col = x - 90;
        for (int i = 0; i < coResults.size(); i++) {
            if (i % 4 == 0) {
                row += 100;
                col = x - 90;
            }
            col += 100;
            DecimalFormat df = new DecimalFormat("#.##E0");
            

            switch (fitnessDisplay) {
                case 0:
                    g.drawString(df.format(coResults.get(i)), col, row);
                    break;
                case 1:
                    g.drawString(df.format(f4Results.get(i)), col, row);
                    break;
                case 2:
                    g.drawString(df.format(mResults.get(i)), col, row);
                    break;
            }

        }

    }

    public void drawLines(Graphics g) {

        for (int i = 1; i <= 3; i++) { // vertical lines
            g.drawLine(x + (i * (width / 4)), y, x + (i * (width / 4)), height + y);
        }
        for (int i = 1; i <= 2; i++) { // horiz lines
            g.drawLine(x, y + (i * (height / 3)), x + width, y + (i * (height / 3)));
        }

    }

    private void setConstants() {
        Rectangle r = this.getBounds();
        x = r.x + 50;
        y = r.y + 50;
        width = 400;
        height = 300;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        genButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        theTA = new javax.swing.JTextArea();
        crossoverSlider = new javax.swing.JSlider();
        genSlider = new javax.swing.JSlider();
        fitnessOptionsBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        crossLabel = new javax.swing.JLabel();
        genLabel = new javax.swing.JLabel();
        genOutLabel = new javax.swing.JLabel();
        crossOutLabel = new javax.swing.JLabel();
        headLessChickenToggle = new javax.swing.JToggleButton();

        setBackground(new java.awt.Color(0, 0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        genButton.setBackground(new java.awt.Color(204, 204, 204));
        genButton.setText("Generate");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });

        theTA.setBackground(new java.awt.Color(0, 0, 0));
        theTA.setColumns(20);
        theTA.setForeground(new java.awt.Color(0, 255, 0));
        theTA.setRows(5);
        theTA.setCaretColor(new java.awt.Color(255, 255, 255));
        theTA.setSelectionColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(theTA);

        crossoverSlider.setBackground(new java.awt.Color(0, 0, 0));
        crossoverSlider.setForeground(new java.awt.Color(0, 255, 0));
        crossoverSlider.setMajorTickSpacing(5);
        crossoverSlider.setMaximum(10);
        crossoverSlider.setPaintLabels(true);
        crossoverSlider.setPaintTicks(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, crossOutLabel, org.jdesktop.beansbinding.ELProperty.create("${text}"), crossoverSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        crossoverSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                crossoverSliderStateChanged(evt);
            }
        });

        genSlider.setBackground(new java.awt.Color(0, 0, 0));
        genSlider.setForeground(new java.awt.Color(0, 255, 0));
        genSlider.setMajorTickSpacing(100000);
        genSlider.setMaximum(1000000);
        genSlider.setPaintTicks(true);
        genSlider.setToolTipText("");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, genOutLabel, org.jdesktop.beansbinding.ELProperty.create("${text}"), genSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        genSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                genSliderStateChanged(evt);
            }
        });

        fitnessOptionsBox.setBackground(new java.awt.Color(102, 102, 102));
        fitnessOptionsBox.setForeground(new java.awt.Color(255, 255, 255));
        fitnessOptionsBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CountOnes", "Fitness4", "Mystery" }));
        fitnessOptionsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitnessOptionsBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Gill Sans Ultra Bold Condensed", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Population Size (10 - 10,000)");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Gill Sans Ultra Bold Condensed", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Mutation rate (.1 - .001)");

        crossLabel.setForeground(new java.awt.Color(255, 255, 255));
        crossLabel.setText("Crossover:");

        genLabel.setForeground(new java.awt.Color(255, 255, 255));
        genLabel.setText("Generations:");

        genOutLabel.setForeground(new java.awt.Color(255, 255, 255));
        genOutLabel.setText("100000");

        crossOutLabel.setForeground(new java.awt.Color(255, 255, 255));
        crossOutLabel.setText("2");

        headLessChickenToggle.setText("HeadLess Chicken");
        headLessChickenToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headLessChickenToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(genButton, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fitnessOptionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crossoverSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(genSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(headLessChickenToggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(crossLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(crossOutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(125, 125, 125)
                                .addComponent(genLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(genOutLabel)))
                        .addGap(69, 69, 69))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(crossLabel)
                                    .addComponent(genLabel)
                                    .addComponent(genOutLabel)
                                    .addComponent(crossOutLabel)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headLessChickenToggle)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fitnessOptionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(crossoverSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
        coResults.clear();
        mResults.clear();
        f4Results.clear();
        System.out.print("\ngenerating");
        for (int row = 1; row <= 3; row++) {
            setMutation(row);
            for (int col = 1; col <= 4; col++) {
                setPopulation(col);
//                System.out.println("Globals.POP_SIZE = " + Globals.POP_SIZE);
                System.out.print(". ");

                generateData();

            }
        }
        theTA.setText(f4PopList.get(0));
        repaint();

    }//GEN-LAST:event_genButtonActionPerformed

    private void fitnessOptionsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitnessOptionsBoxActionPerformed
        int n = fitnessOptionsBox.getSelectedIndex();
        switch (n) {
            case 0:
                setFitnessDisplay(0);
                theTA.setText(coPopList.get(0));
                break;
            case 1:
                setFitnessDisplay(1);
                theTA.setText(f4PopList.get(0));
                break;
            case 2:
                setFitnessDisplay(2);
                theTA.setText(mPopList.get(0));
                break;
        }
    }//GEN-LAST:event_fitnessOptionsBoxActionPerformed

    private void crossoverSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_crossoverSliderStateChanged
        int n = crossoverSlider.getValue();
        Globals.CROSS = n;
    }//GEN-LAST:event_crossoverSliderStateChanged

    private void genSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_genSliderStateChanged
        int n = genSlider.getValue();
        Globals.GENERATIONS = n;

    }//GEN-LAST:event_genSliderStateChanged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        int col = (evt.getX() - this.x) / (width / 4);
        int row = (evt.getY() - this.y) / (height / 3);
        displayPop(row, col);
    }//GEN-LAST:event_formMousePressed

    private void headLessChickenToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headLessChickenToggleActionPerformed
        Globals.HEADLESS_CHICKEN = !Globals.HEADLESS_CHICKEN;
    }//GEN-LAST:event_headLessChickenToggleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel crossLabel;
    private javax.swing.JLabel crossOutLabel;
    private javax.swing.JSlider crossoverSlider;
    private javax.swing.JComboBox<String> fitnessOptionsBox;
    private javax.swing.JButton genButton;
    private javax.swing.JLabel genLabel;
    private javax.swing.JLabel genOutLabel;
    private javax.swing.JSlider genSlider;
    private javax.swing.JToggleButton headLessChickenToggle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea theTA;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void generateData() {
        co = new Population();
        co.run(0);
        coResults.add(co.getAverageFitness());
        coPopList.add(co.toString());

        f4 = new Population();
        f4.run(1);
        f4Results.add(f4.getAverageFitness());
        f4PopList.add(f4.toString());

        m = new Population();
        m.run(2);
        mResults.add(m.getAverageFitness());
        mPopList.add(m.toString());
    }

    private void setMutation(int n) {
        switch (n) {
            case 1:
                Globals.MUTATION_RATE = 10;
                break;
            case 2:
                Globals.MUTATION_RATE = 100;
                break;
            case 3:
                Globals.MUTATION_RATE = 1000;
                break;
        }
    }

    private void setPopulation(int n) {
        switch (n) {
            case 1:
                Globals.setPop(10);
                break;
            case 2:
                Globals.setPop(100);
                break;
            case 3:
                Globals.setPop(1000);
                break;
            case 4:
                Globals.setPop(10000);
                break;
        }
        Globals.MATING_POOL = (int) (Globals.POP_SIZE * .2);
//        System.out.println("pool size = " + Globals.MATING_POOL);
    }

    private void setFitnessDisplay(int i) {
        fitnessDisplay = i;
//        System.out.println("fitnessDisplay = " + fitnessDisplay);
        repaint();
    }

    private void displayPop(int row, int col) {
//        System.out.println("display");
        int count = 0;
        switch (fitnessDisplay) {
            case 0:
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (i == row && j == col) {
                            theTA.setText(coPopList.get(count));
                        }
                        count++;
                    }
                }
                break;
            case 1:
                
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (i == row && j == col) {
                            theTA.setText(f4PopList.get(count));
                        }
                        count++;
                    }
                }
                break;
            case 2:
                
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (i == row && j == col) {
                            theTA.setText(mPopList.get(count));
                        }
                        count++;
                    }
                }
                break;
        }

    }

}
